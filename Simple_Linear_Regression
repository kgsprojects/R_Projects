# SIMPLE LINEAR REGRESSION TEMPLATE

# Importing the dataset
dataset = read.csv('Salary_Data.csv') # read dataset - set dataset by clicking "more" - "set as working directory"
#dataset = dataset[, 2:3]

# Splitting the dataset into the Training set and Test set
library(caTools) # Select library
set.seed(123)
split = sample.split(dataset$Salary, SplitRatio = 2/3) # Return true or false if set went into training or test
training_set = subset(dataset, split == TRUE)
test_set = subset(dataset, split == FALSE)

# Fitting Simple Linear Regression to the Training set
regressor = lm(formula = Salary ~ YearsExperience, data = training_set) #lm is used for linear models #salary is proportional to yearsexperience
# In Console: "Summary(regressor)"
# the lower the Intercept, the more significant the dependant value will be ex: "Salary" value is formula dependant

# Predicting the Test set results
y_pred =predict(regressor, newdata = test_set) #create predicted data for test_set
# In Console: "y_pred" will show predicted data

# Visulizing the Training set results
install.packages('ggplot2') #install plot library
library(ggplot2) #select "ggplot2" or click on it
ggplot() +
  geom_point(aes(x = training_set$YearsExperience, y = training_set$Salary), colour = 'red') +# scatterplot all our points # aes will take the x and y variables and put them on x or y axis 
#want to distinguish observation points and regression points - change color
  geom_line(aes(x = training_set$YearsExperience, y = predict(regressor, newdata = training_set)), colour = 'blue') + #take x coordinates and y coordinates for our regression line # want to take the training set of predicted salaries
  ggtitle('Salary vs Experience (Training Set') + # Title to plot
  xlab('Years of Experience') +
  ylab('Salary')

# Visulizing the Test Set Results
install.packages('ggplot2') #install plot library
library(ggplot2) #Select "ggplot2" or click on it
ggplot() +
  geom_point(aes(x = test_set$YearsExperience, y = test_set$Salary), colour = 'red') +# scatterplot all our points # aes will take the x and y variables and put them on x or y axis 
  #want to distinguish observation points and regression points - change color
  geom_line(aes(x = training_set$YearsExperience, y = predict(regressor, newdata = training_set)), colour = 'blue') + #take x coordinates and y coordinates for our regression line # want to take the training set of predicted salaries
  #no need to change training_set to test set because regressor is set on training set - predictions come from same unique equation
  ggtitle('Salary vs Experience (Training Set') + # Title to plot
  xlab('Years of Experience') + # X-axis
  ylab('Salary') # Y-axis
